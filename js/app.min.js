if (document.getElementById('token')) {
  const currencies = [
    { symbol: 'OKX:BTCUSDT', id: 'chart1' },
    { symbol: 'OKX:TONUSDT', id: 'chart2' },
    { symbol: 'OKX:ETHUSDT', id: 'chart3' },
    { symbol: 'OKX:PEPEUSDT', id: 'chart4' },
    { symbol: 'OKX:NOTUSDT', id: 'chart5' },
    { symbol: 'OKX:DOGSUSDT', id: 'chart6' },
  ];
  
  function createTradingViewWidget(symbol, containerId) {

    const widgetContainer = document.createElement('div');
    widgetContainer.className = 'tradingview-widget-container';
  
    const widgetDiv = document.createElement('div');
    widgetDiv.className = 'tradingview-widget-container__widget';
  
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-mini-symbol-overview.js';
    script.async = true;
    script.innerHTML = JSON.stringify({
      symbol: symbol,
      "width": "100%",
      "height": "100%",
      "locale": "en",
      "dateRange": "3M",
      "colorTheme": "dark",
      "trendLineColor": "rgba(133, 224, 71, 1)",
      "underLineColor": "rgba(133, 224, 71, 0.20)",
      "underLineBottomColor": "rgba(133, 224, 71, 0)",
      "isTransparent": true,
      "autosize": true,
      "largeChartUrl": "",
      "chartOnly": true
    });
  
    widgetContainer.appendChild(widgetDiv);
    widgetContainer.appendChild(script);
  
    document.getElementById(containerId).appendChild(widgetContainer);
  }
  
  currencies.forEach(currency => {
    createTradingViewWidget(currency.symbol, currency.id);
  });
}
let diagram = document.getElementById('diagram');
if (diagram) {
    let diagramPathBig = diagram.querySelectorAll('.js-pathBig');
    let indicators = document.querySelectorAll('.js-indicator');
    
    function hideAllPaths() {
        diagramPathBig.forEach(path => {
            path.classList.add('hide');
        });
    }
    
    function deactivateAllIndicators() {
        indicators.forEach(indicator => {
            indicator.classList.remove('active');
        });
    }
    
    function handleIndicatorClick(indicator) {
        hideAllPaths();
        deactivateAllIndicators();
        indicator.classList.add('active');
        let indicatorName = indicator.getAttribute('data-indicator');
        diagram.getElementById(indicatorName).classList.remove('hide');
    }
    
    function handlePathClick(path) {
        hideAllPaths();
        deactivateAllIndicators();
        let pathId = path.getAttribute('id');
        document.querySelector(`.js-indicator[data-indicator=${pathId}]`).classList.add('active');
        path.classList.remove('hide');
    }
    
    if (!window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
        diagram.getElementById('path-community').classList.remove('hide');
        document.querySelector('.js-indicator[data-indicator=path-community]').classList.add('active');
        indicators.forEach(indicator => {
            indicator.addEventListener('click', () => handleIndicatorClick(indicator));
        });
    
        diagramPathBig.forEach(path => {
            path.addEventListener('click', () => handlePathClick(path));
        });
    } else {
        indicators.forEach(indicator => {
            indicator.addEventListener('mouseenter', () => handleIndicatorClick(indicator));
        });
        diagramPathBig.forEach(path => {
            path.addEventListener('mouseenter', () => handlePathClick(path));
        });
    
        indicators.forEach(indicator => {
            indicator.addEventListener('mouseleave', () => {
                deactivateAllIndicators();
                hideAllPaths();
            });
        });
    
        diagramPathBig.forEach(path => {
            path.addEventListener('mouseleave', () => {
                deactivateAllIndicators();
                hideAllPaths();
            });
        });
    }
}
document.querySelectorAll('.js-openDropdown').forEach(openDropdown => {
    openDropdown.addEventListener('click', () => {
      openDropdown.classList.toggle('open');
      openDropdown.closest('.js-dropdown').classList.toggle('open');
    });
  });
const burgerBtn = document.querySelector('.js-burgerBtn');
const burger = document.querySelector('.js-burger');
const langBtn = document.querySelector('.js-langBtn');
burgerBtn.addEventListener('click', function () {
  burger.classList.toggle('show');
  this.classList.toggle('active')
  if (this.classList.contains('active')) {
    wrapperFixPosition();
  } else {
    wrapperUnfixPosition();
  }
});
document.querySelectorAll('.header__link a').forEach(item => {
  item.addEventListener('click', () => {
    burger.classList.remove('show');
    burgerBtn.classList.remove('active');
    wrapperUnfixPosition();
  });
});
function wrapperFixPosition() {
  const fixBlocks = document.querySelectorAll('.js-fixBlock');
  let paddingOffset = window.innerWidth - document.querySelector('body').offsetWidth + 'px';
  setTimeout(function () {
    if (!document.querySelector('body').hasAttribute('wrapper-body-scroll-fix')) {
      let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
      fixBlocks.forEach((el) => {
        el.style.paddingRight = paddingOffset;
      });
      document.querySelector('body').style.overflow = 'hidden';
      document.querySelector('body').setAttribute('wrapper-body-scroll-fix', scrollPosition);
      document.querySelector('body').style.overflow = 'hidden';
      document.querySelector('body').style.position = 'fixed';
      document.querySelector('body').style.top = '-' + scrollPosition + 'px';
      document.querySelector('body').style.left = '0';
      document.querySelector('body').style.width = '100%';
      document.querySelector('body').style.paddingRight = paddingOffset;
    }
  }, 15);
}
function wrapperUnfixPosition() {
  const fixBlocks = document.querySelectorAll('.js-fixBlock');
  if (document.querySelector('body').hasAttribute('wrapper-body-scroll-fix')) {
    let scrollPosition = document.querySelector('body').getAttribute('wrapper-body-scroll-fix');
    document.querySelector('body').removeAttribute('wrapper-body-scroll-fix');
    document.querySelector('body').style.overflow = '';
    document.querySelector('body').style.position = '';
    document.querySelector('body').style.top = '';
    document.querySelector('body').style.left = '';
    document.querySelector('body').style.width = '';
    window.scroll(0, scrollPosition);
    fixBlocks.forEach((el) => {
      el.style.paddingRight = '0px';
    });
    document.querySelector('body').style.paddingRight = '0px';
  }
}